//Copyright (c) 2019 Ultimaker B.V.
//CuraEngine is released under the terms of the AGPLv3 or higher.

#include <gtest/gtest.h>

#include "../../../../../../toolkit/cura_engine/src/infill.h"
#include "ReadTestPolygons.h"

//#define TEST_INFILL_SVG_OUTPUT
#ifdef TEST_INFILL_SVG_OUTPUT
#include <cstdlib>
#include "../src/utils/SVG.h"
#endif //TEST_INFILL_SVG_OUTPUT
#include "fstream"

namespace cura
{
      void ExportOutLinesToVtk (Polygons P, double height, std::string filename=" ") {
	int n = 0;
	for (int i = 0; i < P.size(); i++) {
	    n += P[i].size();
	}
	
	std::ofstream out;
	out.open((std::string("./data/vtk/")+filename).c_str());
	//out.open(filename.c_str());
	
	out <<"# vtk DataFile Version 2.0" << std::endl;
	out << "slices example" << std::endl;
	out << "ASCII" << std::endl;
	out << "DATASET UNSTRUCTURED_GRID" << std::endl;
	out << "POINTS " << n << " float" << std::endl;
	for (int i = 0; i < P.size(); i++) {
	    for (int j = 0; j < P[i].size(); j++) {
		out << P[i][j].X << " " << P[i][j].Y << " " << height << std::endl;
	    }
	}
	out << "CELLS " << P.size() << " " << P.size() + n + P.size() << std::endl;
	int m = 0;
	for (int i = 0; i < P.size(); i++) {
	    out << P[i].size() + 1;
	    for(int j = 0; j < P[i].size(); j++) { //Find the starting corner in the sliced layer.
		out << " " << m;
		m++;
	    }
	    out << " " << m - P[i].size();
	    out << std::endl;
	}
	out << "CELL_TYPES " << P.size() << std::endl;
	for (int i = 0; i < P.size(); i++) {
	    out << 4 << std::endl;
	}
    }
}
